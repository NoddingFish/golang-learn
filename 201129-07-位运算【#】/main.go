package main

import (
	"fmt" //如果我们没有使用一个包，但是不想去掉，前面加 _
)

func main() {
	//对于有符号而言：
	//TODO 1、二进制的最高位都是符号位，0表示正数，1表示负数
	//1 ===> [0000 0001]  -1 ===> [1000 0001]

	//TODO 2、正数的原码，反码，补码都一样

	//TODO 3、负数的反码，它的原码符号位不变，其他位取反（0->1 2->0）

	//TODO 4、负数的补码=它的反码+1

	// 1 => 原码 [0000 0001] 反码 [0000 0001] 补码 [0000 0001]
	//-1 => 原码 [1000 0001] 反码 [1111 1110] 补码 [1111 1111]

	//TODO 5、0的反码，补码都是0

	//TODO 6、在计算机运算的时候，都是以补码的方式来运算的。

	//位运算 & | ^ << >>
	// 按位与 => & :两位全为1，结果为1，否则为0
	// 按位或 => | :其中一个为1，结果为1，否则为0
	// 按位异或 => ^ :两个一个为0，一个为1，结果为1，否则为0
	
	yu1 := 2 & 3
	// 2 => 0000 0010
	// 3 => 0000 0011
	//      0000 0010  ==> 2
	fmt.Println("2 & 3按位与：", yu1)

	yu2 := -2 & 3
	//-2 => 1000 0010 => 反码：1111 1101 补码：1111 1110 
	// 3 => 0000 0011 => 补码：0000 0011
	//      0000 0010  ==> 2
	fmt.Println("-2 & 3按位与：", yu2)

	huo1 := 2 | 3
	// 2 => 0000 0010
	// 3 => 0000 0011
	//      0000 0011  ==> 3
	fmt.Println("2 | 3按位或：", huo1)

	
	yihuo1 := 2 ^ 3
	// 2 => 0000 0010
	// 3 => 0000 0011
	//      0000 0001  ==> 1
	fmt.Println("2 ^ 3按位异或：", yihuo1)

	yihuo2 := -2 ^ 2
	//-2 => 1000 0010 => 反码：1111 1101 补码：1111 1110 
	// 2 => 0000 0010 => 补码：0000 0010
	//      1111 1100  ==> 补码
	//补码：1111 1100 => 反码：1111 1011 原码：1000 0100 => -4
	fmt.Println("-2 ^ 2按位异或：", yihuo2)

	yihuo3 := -2 ^ 10
	//-2 => 1000 0010 => 反码：1111 1101 补码：1111 1110 
	//10 => 0000 1010 => 补码：0000 1010
	//      1111 0100  ==> 补码
	//补码：1111 0100 => 反码：1111 0011 原码：1000 1100 => -12
	fmt.Println("-2 ^ 10按位异或：", yihuo3)

	//移位运算符
	// >> 右移：低位溢出，符号位不变，并用符号位补溢出的高位
	// << 左移：符号位不变，低位补0

	youyi1 := 1 >> 2
	// 0000 0001 >>2 0000 0000 => 0
	fmt.Println("1 >> 2：", youyi1)

	youyi2 := -1 >> 2
	// -1 => 原码：1000 0001 反码：1111 1110 补码：1111 1111
	//1111 1111 >>2 1111 1111 反码：1111 1110 原码：1000 0001
	//结果  -1
	fmt.Println("-1 >> 2：", youyi2)

	zuoyi1 := 1 << 2
	// 0000 0001 <<2 0000 0100 => 4
	fmt.Println("1 << 2：", zuoyi1)
	
}